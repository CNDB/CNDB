Common Node Database
====================

For community wireless networks (CWNs), a node database serves as a central
repository of network information. It comprises information about
nodes deployed at certain locations, devices installed at these
locations, information about internet addresses, and --- in networks that
use explicit link planning --- links among devices. All this information
is maintained via a web or REST interface by the community members.

Built on top of this database are several applications that help build,
expand, and maintain the network. A non-exhaustive list of applications
is given in section `Node Database Applications`_.

Historically, each community network has built their own node database
and corresponding tools. There was some effort to come up with a common
implementation of a node database but so far none of these efforts has
seen deployment beyond one or two installations.

One of the reasons that up to now no common node database exists, is that
there are diverging needs of each running network on the one hand, and
the need to fully understand (and be able to modify) the software used
to run the network on the other hand.

Many different programming languages, web frameworks, and databases are used
to implement web applications. Therefore, existing node database
implementations use widely different implementation
technologies and have --- although they share a common set of requirements ---
focused on different aspects of the daily operation of a community
wireless network. This has resulted in a plethora of different solutions
to similar problems with different quality of service across the set of
solutions offered.

To get a better understanding of the common requirements of community
wireless networks and to eventually facilitate interoperability, the
community network markup language project was founded in 2006 [CNML09]_.
To date we know of an implementation by guifi.net [guifi1]_ and another
similar XML export by Athens Wireless Metropolitan Network (AWMN).

Common Node Database in Confine and in CWNs
-------------------------------------------

One goal of the Confine project is the integration of research devices
into community networks for research purposes. To integrate with the
community network, research devices need some information about the
location where they are deployed as well as on the structure and
interconnection of the community network. This is needed to allow
experimenters to access topology data and to manage large experiments
with many research nodes.

To avoid duplicating data in the community network database and the
research database, the common node database implementation was started.
Starting from the CNML definition and the guifi.net implementation and
from node database implementations of Funkfeuer Wien [ff]_, Funkfeuer Graz,
Guifi.net [guifi2]_, Ninux Italy, WLAN Slovenia [nodewatcher]_, AWMN
[awmn]_ and others [netmon]_, an object model was
designed and implemented detailed in section Architecture_. It has
already been informally reviewed by members of some of the CWNs
mentioned.

The new common node database implementation is intended to replace
some existing implementations currently in use by confine project members,
but due to the reasons outlined above we don't anticipate universal
adoption. However, the implementation serves as a testbed in the Confine
project and is used to draft a prototype implementation of a programming
interface (API) that can be implemented by any community wireless
network. Definition of an API is crucial to link the information in the
research database to the data in the community database.

Furthermore, the definition of a common API can be used to implement
applications (e.g., a map or the generation of configuration files
for external monitoring services) that can be used by several CWNs that
implement the API. We therefore will propose the API to the communities
and will try to get a draft standard adopted by many of them.


Architecture
------------

The design in `Figure: object model`_ is based on the analysis of
several existing node databases of various community wireless networks.
It is the basis of a common API definition. Discussions with developers
of CWNs have indicated that the model is compatible enough to existing
databases to allow the implementation of the same common API for
different CWNs.

.. _`Figure: object model`:
.. figure:: nodedb.png

    Object Model of Common Node Database

Some notes on the object model: we try to keep only the relevant
attributes of a real-world object in the object itself --- everything else
is modeled as a relation. The blue arrows denote inheritance
relationships ("IS_A"). The yellow arrows are attributes, e.g., the `Node`
has an attribute manager of type `Person` which is required (this is
implemented as a foreign key in the database).

The black arrows are 1:N or N:M relationships (also implemented as foreign
keys in the database) but the relation objects have their own identity. This
is used to separate the attributes of an object from its links to other
objects. It also implements referential integrity constraints: a link is
deleted if any object it refers to is deleted.

There are different link types. A two-way link (implementing a 1:N or N:M
relationship) has a left and a right side (or link role). An example is
`Wireless_Interface_uses_Wireless_Channel`;
in the diagram this link object is displayed as `_uses_` between the
`FFM.Wireless_Channel` and `FFM.Wireless_Interface`. The black arrows
connecting these are labeled `left` and `right` which indicates how this
should be read. Note, that in this case the `left` attribute is on the
right side in the diagram. A two-way link like this has an identity and
can have additional attributes besides `left` and `right`; it also can
appear as lin role in another link type.

There are also unary links with only a `left` side. An example is the
`Device` which cannot exist without its `left` attribute, the `Device_Type`.
There can be several devices with the same device type. This
relationship is inherited by `Antenna` and `Antenna_Type` and `Net_Device` and
`Net_Device_Type`.

Node Database Applications
--------------------------

Traditionally, different CWNs have implemented different applications on
top of their own node database. During requirements analysis [req]_, several
common applications have been identified. Note, that we do not intend to
implement all of these applications during the project, instead we will
try to get some existing applications ported to the new common database
API. Also note that the list is not exhaustive.

- Registry: Register users with their name and email
  address, register nodes and devices and associate them to users.

- IP address registry and allocation: Allow users to register IP
  addresses or IP ranges for their devices and make sure no address is
  registered twice. Also allow to de-allocate an existing IP allocation.
  Since many CWNs run on RFC 1918 private IP addresses, one of the
  challenges is to move to IPv6 addresses; a new common node database
  implementation has to support IPv4 and IPv6.

- Map: Draw all nodes on a map to get a graphical overview of the
  network; most existing community networks have implemented a map
  service.

- Link planning: This answers the question: "If I try to interconnect
  these two devices via antennae, will it work?". Note, that some CWNs use
  explicit link planning (where each link needs an explicit configuration
  in the routing protocol used) while other networks use a dynamic
  routing protocol to establish links (e.g., OLSR). Both should be
  supportable by the node database.

- Auto configuration of devices: To facilitate deployment of new nodes,
  some community networks have implemented various degrees of
  auto-configuration for devices; this makes it easier for users to
  deploy new devices. In addition to auto-configuration of existing
  devices, some applications allow the generation of firmware for various
  devices.

- Generation of tools necessary for running a network, e.g., name-server
  configuration, directory services.

- Generation of configuration for network monitoring and -alerting tools
  like smoke-ping, nagios, or cacti.

In addition experimental features can be investigated, e.g.,

- Social networking functions: allow community members to contact other
  members and invite them to build a link to their node.

- Federation: Allow services such as DNS zones to be federated across
  the network.

- Services offered by the network or by users, e.g., Voice over IP or
  video on demand applications. Note, that in some existing CWNs services
  like this are not considered an experimental feature but are already
  deployed in production quality.

Status and Future Work
----------------------

For the common node database, the object model as indicated in section
`Architecture`_ has been implemented. On top of this model, a first
version of a `REpresentational State Transfer API`_ (REST API) has been
implemented. The code is publicly available on github [FFM]_ and in the
Confine project repository.

During a Confine meeting in Spain, the API has been discussed with developers
from guifi.net, AWMN, and Ninux. This work will be continued until
we can come up with a draft API definition that all participating CWN
developers think they can implement on top of their existing database.

.. _`REpresentational State Transfer API`:
    http://en.wikipedia.org/wiki/Representational_state_transfer

The common node database has been implemented on top of an open source
python framework for web application development called Tapyr [tapyr]_
that uses several other
frameworks, e.g., `jinja`_, `sqlalchemy`_, and `werkzeug`_.

During the implementation, necessary additions to the
framework (e.g., IP Address computations on databases that do not support
a native IP address type) have been incorporated. The framework already
has a reference documentation but needs a tutorial to get other
developers started.

.. _`jinja`: http://jinja.pocoo.org/
.. _`sqlalchemy`: http://www.sqlalchemy.org/
.. _`werkzeug`: http://werkzeug.pocoo.org/

Bibliography
------------

.. [awmn] `General setup and description of the AWMN network`_, 2011
.. [CNML09] `Community Network Mark Up Language Project`_, Alexander Klosch
    et. al. 2009
.. [ff] `General setup and description of Funkfeuer vienna network`_,
    2011
.. [FFM] `Common Node Database`_, 2012
.. [guifi1] `Guifi.net CNML Wiki`_, retrieved 2012-10-15
.. [guifi2] `General setup and description of the Guifi.net network`_,
    2011
.. [netmon] `General setup and description of Freifunk Oldenburg
    network`_, 2011
.. [nodewatcher] `General setup and description of the Slowenian
    network`_, 2011
.. [req] `Node database requirements document`_, 2011
.. [tapyr] `Tapyr Framework`_, 2012

.. _`Node database requirements document`:
    https://wiki.confine-project.eu/nodedb:reqdocument
.. _`General setup and description of the Slowenian network`:
    https://docs.google.com/document/d/1I9kS-L_LX5sXjXTp4ajQXTefmqZFN4osx-CDB5_1Zps/edit
.. _`Community Network Mark Up Language Project`: http://cnml.info/
.. _`Guifi.net CNML Wiki`: http://en.wiki.guifi.net/wiki/CNML
.. _`General setup and description of the Guifi.net network`:
    https://docs.google.com/document/d/1XYHOMaSkEe2mCj0_Va0pE2om-oHrWifkEInQ2NJ3W18/edit?pli=1
.. _`General setup and description of the AWMN network`:
    https://docs.google.com/document/d/1qfOXNrLBrGwU8lKBHIQAShnqgNE3udPoSYEMOhKWoDI/edit?pli=1
.. _`General setup and description of Freifunk Oldenburg network`:
    https://docs.google.com/document/d/1LzhdGOQwJgarpRjeIFM1HN0xZENj43MdwIQaAk8MR68/edit
.. _`General setup and description of Funkfeuer vienna network`:
    https://docs.google.com/document/d/1mJFBgJLPs_0O-Y0fd2-txXcl90iFGjKJvZ3hdJ_Yj8c/edit
.. _`Common Node Database`: https://github.com/FFM/FFM
.. _`Tapyr Framework`: https://github.com/Tapyr/tapyr
